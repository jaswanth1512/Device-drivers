
****************************Building module*****************************

Q1)why do we use __init for a initlization function?
-> so that all the initilization is done in .init section of ELF and can be freed once the initlization is done

Q2) How to compile a kernel module?
-> make -C <linux kernal source tree>M=<makefile of our module>[target]
Here -C --->is used to point the makefile of kernal tree, so that we could use all compiler swithces,dependency lsit,Version string.
M=<makefile of our module> ---> this will help us to redirect to our makefile
Target can be --> module(to build a module),module_install(to install a module),clean(to clean a module),help.
Then we should create a make file for our program and it has a command "obj-<X> : <module_name>.o" 
	X = n , Do not compile the module
	X = y , compile and link module with kernal image
	X = m , compile as dynamically loadable kernal module.	


	
***************************printk*******************************

syntax of printk is same as printf 
printf("Hello world");
printk("Hello world");
printf("value = %d",i);
printk("value = %d",i);
printk messages will go into kernel ring buffer which is also known as kernel log which can be seen using dmesg.
dmesg | tail -5 //to check last 5 messages
dmesg | head -5 //to check first 5 messages
printk doesnot suppoort %f,%e,%g
to know format specifiers of printk we can see linux/Documentation/printk-formats.txt

Q1)how is printk differ from printf then?
-> printf is user level and printk is kernel leve.
   In printk we can assign the priority to the messages which is known as loglevel
   default printk priority is 4 that is KERN_WARNING
   ---> log levels can be seen in includes/linux/kern_levels.h
kernel understand the importance of messages to be shown
printk("Hello world"); == printk(KERN_WARNING"Hello world");
default CONFIG_CONSOL_LOG_LEVEL is 7
printk loglevel is compared with CONFIG_CONSOL_LOG_LEVEL and if it is less then it prints on console



************************Device Drivers****************************
Device driver is a code which knows how to handle a device and gaives an interface to user space to access that device.
it also abstracts various hardware details from user-space application. kernal is used to connect the system calls to the device driver's system call.


************************char driver*******************************
character driver is used to access the data sequentially that is byte by byte
RTC,keyboard...are examples.


************************block driver*******************************
The device which handles data in chunk or blocks are known as block device
advance buffering techniques should be used in this

